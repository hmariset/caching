apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "squid.fullname" . }}
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "squid.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "squid.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        # Trigger a redeployment when the configmap changes
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "squid.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "squid.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      containers:
        - name: squid
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ include "squid.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3128
              protocol: TCP
          {{- if .Values.perSiteExporter.enabled }}
            - name: per-site-http
              containerPort: {{ .Values.perSiteExporter.port }}
              protocol: TCP
          {{- end }}
          {{- if .Values.perSiteExporter.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: per-site-http
              scheme: HTTPS
          readinessProbe:
            httpGet:
              path: /health
              port: per-site-http
              scheme: HTTPS
          {{- else }}
          livenessProbe:
            tcpSocket:
              port: http
          readinessProbe:
            tcpSocket:
              port: http
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: squid-config
              mountPath: /etc/squid/squid.conf
              subPath: squid.conf
            # Mount the shared volume for the certificates
            - name: squid-certs-secret
              mountPath: /etc/squid/certs
              readOnly: true
            # Mount the cache volume
            - name: squid-spool-cache
              mountPath: /var/spool/squid/cache
            # Mount the SSL database volume
            - name: squid-spool-ssl
              mountPath: /var/spool/squid/ssl
            {{- if .Values.test.enabled }}
            # Mount the test-server's CA bundle for upstream trust
            - name: test-server-ca-bundle-vol
              mountPath: /etc/squid/trust/test-server
              readOnly: true
            {{- end }}
          {{- if .Values.perSiteExporter.enabled }}
          args:
            - squid-with-per-site-exporter
            - -web.listen-address
            - ":{{ .Values.perSiteExporter.port }}"
            - -web.tls-cert-file
            - /etc/squid/certs/tls.crt
            - -web.tls-key-file
            - /etc/squid/certs/tls.key
          {{- end }}
        - name: icap-server
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ include "squid.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: icap
              containerPort: 1344
              protocol: TCP
          args:
            - icap-server
          livenessProbe:
            tcpSocket:
              port: icap
          readinessProbe:
            tcpSocket:
              port: icap
          resources:
            {{- toYaml .Values.icapServer.resources | nindent 12 }}
        {{- if .Values.squidExporter.enabled }}
        - name: squid-exporter
          securityContext:
            {{- toYaml .Values.squidExporter.securityContext | nindent 12 }}
          image: "{{ include "squid.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: metrics
              containerPort: {{ .Values.squidExporter.port }}
              protocol: TCP
          env:
            - name: SQUID_HOSTNAME
              value: "localhost"
            - name: SQUID_PORT
              value: "{{ .Values.service.port }}"
            - name: SQUID_EXPORTER_LISTEN
              value: ":{{ .Values.squidExporter.port }}"
            - name: SQUID_EXPORTER_METRICS_PATH
              value: "{{ .Values.squidExporter.metricsPath }}"
            - name: SQUID_EXTRACTSERVICETIMES
              value: "{{ .Values.squidExporter.extractServiceTimes }}"
            {{- if .Values.squidExporter.squidLogin }}
            - name: SQUID_LOGIN
              value: "{{ .Values.squidExporter.squidLogin }}"
            {{- end }}
            {{- if .Values.squidExporter.squidPassword }}
            - name: SQUID_PASSWORD
              value: "{{ .Values.squidExporter.squidPassword }}"
            {{- end }}
          args:
            - exporter
            - -squid-hostname
            - "localhost"
            - -squid-port
            - "{{ .Values.service.port }}"
            - -listen
            - ":{{ .Values.squidExporter.port }}"
            - -metrics-path
            - "{{ .Values.squidExporter.metricsPath }}"
            {{- if .Values.squidExporter.squidLogin }}
            - -squid-login
            - "{{ .Values.squidExporter.squidLogin }}"
            {{- end }}
            {{- if .Values.squidExporter.squidPassword }}
            - -squid-password
            - "{{ .Values.squidExporter.squidPassword }}"
            {{- end }}
            {{- range $key, $value := .Values.squidExporter.customLabels }}
            - -label
            - "{{ $key }}={{ $value }}"
            {{- end }}
          livenessProbe:
            httpGet:
              path: {{ .Values.squidExporter.metricsPath }}
              port: metrics
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: {{ .Values.squidExporter.metricsPath }}
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.squidExporter.resources | nindent 12 }}
        {{- end }}
      volumes:
        - name: squid-config
          configMap:
            name: {{ include "squid.fullname" . }}-config
        # Mount the secret created by cert-manager
        - name: squid-certs-secret
          secret:
            secretName: {{ .Values.namespace.name }}-tls
        # Volume for Squid's cache
        - name: squid-spool-cache
          emptyDir:
            medium: Memory
            sizeLimit: {{ .Values.cache.size }}Mi
        # Volume for Squid's SSL database
        - name: squid-spool-ssl
          emptyDir: {}
        {{- if .Values.test.enabled }}
        # This volume makes the ConfigMap created by the test-server-bundle available
        - name: test-server-ca-bundle-vol
          configMap:
            name: test-server-bundle # This is the ConfigMap created by the Bundle in Step 5
            items:
            - key: ca.crt
              path: ca.crt
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if hasKey .Values "affinity" }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- else }}
      affinity:
        {{- include "squid.defaultAffinity" . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
